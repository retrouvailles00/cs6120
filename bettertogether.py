# -*- coding: utf-8 -*-
"""bettertogether.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fI8bDQ1h6QDn9sEAquY4TgyfAaTRypog
"""

import json,requests
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
import matplotlib
import matplotlib.pyplot as plt

def get_data_by_author_name(author_name):
  url = 'https://api.semanticscholar.org/graph/v1/author/search?query=' + str(author_name) + '&fields=name,citationCount,papers,papers.citationCount'
  j = requests.get(url).json()
  if j['data'] is not None:
    return j['data']

def citations(rec): return rec['citationCount']

def get_embeddings_by_paper_id(paper_id):
  url = 'https://api.semanticscholar.org/graph/v1/paper/' + str(paper_id) + '?fields=title,embedding,citationCount,title'
  j = requests.get(url).json()
  if j['embedding'] is not None:
    return j['embedding']['vector']

def get_embeddings_by_author_id(author_id, data, nbest_paper):
  papers = [x['papers'] for x in data if x["authorId"]==author_id]
  if len(papers) != 0:
    paper_ids = [paper['paperId'] for paper in sorted(papers[0], key=citations, reverse=True)] ## Suggested improvement 2: Sort candidate papers by citations.
    candidates = [get_embeddings_by_paper_id(p) for p in paper_ids]
    # if len(candidates) > nbest_paper:
    #   candidates = candidates[0:nbest_paper]
    return candidates

def get_sorted_author_id(data, nbest_author):
  sorted_authorIds = [d['authorId'] for d in sorted(data, key=citations, reverse=True)] ## Suggested improvement 1: Sort candidate authors by citations.
  # if len(sorted_authorIds) > nbest_author:
  #   sorted_authorIds = sorted_authorIds[0:nbest_author]
  return sorted_authorIds

data = get_data_by_author_name("David Madigan")
sorted_authorIds = get_sorted_author_id(data, 5)
all_embeddings = []
for author_id in sorted_authorIds:
  embedding = get_embeddings_by_author_id(author_id, data, 5)
  if embedding is not None:
    all_embeddings += embedding

all_embeddings = np.array([e for e in all_embeddings if e is not None])
print(all_embeddings.shape)
scores = cosine_similarity(all_embeddings)
scores

plt.imshow(scores)
plt.colorbar()
